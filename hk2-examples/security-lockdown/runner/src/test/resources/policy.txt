// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
//
// Copyright (c) 2012 Oracle and/or its affiliates. All rights reserved.
//
// The contents of this file are subject to the terms of either the GNU
// General Public License Version 2 only ("GPL") or the Common Development
// and Distribution License("CDDL") (collectively, the "License").  You
// may not use this file except in compliance with the License.  You can
// obtain a copy of the License at
// https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
// or packager/legal/LICENSE.txt.  See the License for the specific
// language governing permissions and limitations under the License.
//
// When distributing the software, include this License Header Notice in each
// file and include the License file at packager/legal/LICENSE.txt.
//
// GPL Classpath Exception:
// Oracle designates this particular file as subject to the "Classpath"
// exception as provided by Oracle in the GPL Version 2 section of the License
// file that accompanied this code.
//
// Modifications:
// If applicable, add the following below the License Header, with the fields
// enclosed by brackets [] replaced by your own identifying information:
// "Portions Copyright [year] [name of copyright owner]"
//
// Contributor(s):
// If you wish your version of this file to be governed by only the CDDL or
// only the GPL Version 2, indicate your decision by adding "[Contributor]
// elects to include this software in this distribution under the [CDDL or GPL
// Version 2] license."  If you don't indicate a single choice of license, a
// recipient has the option to distribute your version of this file under
// either the CDDL, the GPL Version 2 or to extend the choice of license to
// its licensees as provided above.  However, if you add GPL Version 2 code
// and therefore, elected the GPL Version 2 license, then the option applies
// only if the new code is made subject to such option by the copyright
// holder.
//

// Give java code itself everything
grant codeBase "file:${java.home}/-" {
  permission java.security.AllPermission;
};

// Give everything from the local repo everything
grant codeBase "file:${local.repo}/-" {
  permission java.security.AllPermission;
};

// This is for when running in the top-level directory
// of hk2 in maven, we need to grant the hk2-utils jar file
// allPermission.  If running from the hk2-locator directory
// itself the all permission for hk2-utils will be coming
// from the local.repo grant
grant codeBase "file:${build.dir}/../../../../hk2-utils/target/-" {
  permission java.security.AllPermission;
};

// This is for when running in the top-level directory
// of hk2 in maven, we need to grant the hk2-api jar file
// allPermission.  If running from the hk2-locator directory
// itself the all permission for hk2-api will be coming
// from the local.repo grant
grant codeBase "file:${build.dir}/../../../../hk2-api/target/-" {
  permission java.security.AllPermission;
};

// This is for when running in the top-level directory
// of hk2 in maven, we need to grant the cglib jar file
// allPermission.  If running from the hk2-locator directory
// itself the all permission for hk2-api will be coming
// from the local.repo grant
grant codeBase "file:${build.dir}/../../../../external/cglib/target/-" {
  permission java.security.AllPermission;
};

// This is the grant that should contain the minimal grants necessary
// for security-lockdown runner to run under maven. 
grant codeBase "file:${build.dir}/../../../../hk2-locator/target/-" {
  permission java.security.AllPermission;
};

// This is the grant that should contain the minimal grants necessary
// for security-lockdown runner to run under maven. 
grant codeBase "file:${build.dir}/../../../../hk2-testing/hk2-junitrunner/target/-" {
  permission java.security.AllPermission;
};

// This is the grant that should contain the minimal grants necessary
// for security-lockdown runner to run under maven. 
grant codeBase "file:${build.dir}/../../system/target/-" {
  permission java.security.AllPermission;
};

// This is the grant that should contain the minimal grants necessary
// for security-lockdown runner to run under maven. 
grant codeBase "file:${build.dir}/../../alice/target/-" {
  permission java.lang.RuntimePermission "accessClassInPackage.javax.inject";
  permission java.lang.RuntimePermission "accessClassInPackage.com.alice.application";
  permission java.lang.RuntimePermission "accessClassInPackage.org.jvnet.hk2.annotations";
  permission java.lang.RuntimePermission "accessClassInPackage.org.acme.security";
};

// This is the grant that should contain the minimal grants necessary
// for security-lockdown runner to run under maven. 
grant codeBase "file:${build.dir}/../../mallory/target/-" {
  permission java.lang.RuntimePermission "accessClassInPackage.javax.inject";
  permission java.lang.RuntimePermission "accessClassInPackage.com.mallory.application";
  permission java.lang.RuntimePermission "accessClassInPackage.com.alice.application";
  permission java.lang.RuntimePermission "accessClassInPackage.org.jvnet.hk2.annotations";
  permission java.lang.RuntimePermission "accessClassInPackage.org.glassfish.hk2.api";
};

// This is the grant that should contain the minimal grants necessary
// for security-lockdown runner test classes.  These should have AllPermission, since
// we are not doing any specific security testing here.  It is the
// classes directory that should have minimal grants, not the tests 
grant codeBase "file:${build.dir}/test-classes/-" {
  permission java.security.AllPermission;
};

// This is the grant that should contain the minimal grants necessary
// for security-lockdown runner to run under maven. 
grant codeBase "file:${build.dir}/classes/-" {
  permission java.security.AllPermission;
};
